```import boto3
from flask import Flask
from cryptography.fernet import Fernet
import subprocess
import datetime

# ---------- SECTION 1: CLOUD MIGRATION (AWS S3) ---------- #
# AWS S3 client setup
s3 = boto3.client('s3')

def migrate_data_to_s3(file_name, bucket_name):
    """Uploads a file to an AWS S3 bucket."""
    try:
        s3.upload_file(file_name, bucket_name, file_name)
        print(f"File '{file_name}' successfully uploaded to '{bucket_name}'")
    except Exception as e:
        print(f"Error uploading file: {e}")

# ---------- SECTION 2: CLOUD-READY WEB SERVICE (Flask) ---------- #
app = Flask(__name__)

@app.route('/')
def home():
    return "Hello, Cloud-Ready Service!"

def run_flask_app():
    """Runs a Flask web service."""
    app.run(debug=True)

# ---------- SECTION 3: DATA SECURITY (Encryption) ---------- #
# Key generation for encryption
key = Fernet.generate_key()
cipher_suite = Fernet(key)

def encrypt_data(data):
    """Encrypts sensitive data using Fernet encryption."""
    return cipher_suite.encrypt(data)

def decrypt_data(encrypted_data):
    """Decrypts previously encrypted data."""
    return cipher_suite.decrypt(encrypted_data)

# ---------- SECTION 4: AUTOMATING INFRASTRUCTURE (Terraform) ---------- #
def apply_terraform():
    """Automates cloud infrastructure setup using Terraform."""
    try:
        process = subprocess.Popen(["terraform", "apply", "-auto-approve"], stdout=subprocess.PIPE)
        for line in process.stdout:
            print(line.decode("utf-8").strip())
    except Exception as e:
        print(f"Error applying Terraform: {e}")

# ---------- SECTION 5: COST MONITORING (AWS Cost Explorer) ---------- #
ce = boto3.client('ce')

def get_cost_and_usage(start_date, end_date):
    """Fetches cloud usage costs from AWS."""
    try:
        response = ce.get_cost_and_usage(
            TimePeriod={'Start': start_date, 'End': end_date},
            Granularity='MONTHLY',
            Metrics=['AmortizedCost']
        )
        print("Cloud Cost & Usage: ", response['ResultsByTime'])
    except Exception as e:
        print(f"Error retrieving cost data: {e}")

# ---------- MAIN WORKFLOW: USING ALL FEATURES TOGETHER ---------- #
if __name__ == "__main__":
    # --- Data Security ---
    data = b"Sensitive data for cloud migration"
    encrypted_data = encrypt_data(data)
    print(f"Encrypted Data: {encrypted_data}")

    # --- Cloud Migration ---
    migrate_data_to_s3("example.txt", "your-s3-bucket")

    # --- Infrastructure Automation ---
    print("Applying Terraform to set up infrastructure...")
    apply_terraform()

    # --- Cloud-Ready Web Service ---
    print("Starting Flask web service...")
    run_flask_app()

    # --- Cost Monitoring ---
    today = datetime.date.today()
    start = str(today.replace(day=1))
    end = str(today)
    print(f"Monitoring cloud costs from {start} to {end}...")
    get_cost_and_usage(start, end)
```
